/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_freiheit_gnupg_GnuPGContext */

#ifndef _Included_com_freiheit_gnupg_GnuPGContext
#define _Included_com_freiheit_gnupg_GnuPGContext
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeCheckVersion
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeCheckVersion
  (JNIEnv *, jclass);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeGetEngineInfo
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeGetEngineInfo
  (JNIEnv *, jobject);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeNew
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeNew
  (JNIEnv *, jobject);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeOpEncrypt
 * Signature: (J[JJJ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeOpEncrypt
  (JNIEnv *, jobject, jlong, jlongArray, jlong, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeOpDecrypt
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeOpDecrypt
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeOpChangePassphrase
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeOpChangePassphrase
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeRelease
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeRelease
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeOpEncryptSign
 * Signature: (J[IJJ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeOpEncryptSign
  (JNIEnv *, jobject, jlong, jintArray, jlong, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeOpDecryptVerify
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeOpDecryptVerify
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeOpSign
 * Signature: (JJJ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeOpSign
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeOpVerify
 * Signature: (JJJJ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeOpVerify
  (JNIEnv *, jobject, jlong, jlong, jlong, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeKeylist
 * Signature: (JLjava/lang/String;)[Lcom/freiheit/gnupg/GnuPGKey;
 */
JNIEXPORT jobjectArray JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeKeylist
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeAddSigners
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeAddSigners
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeClearSigners
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeClearSigners
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeOpImport
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeOpImport
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeOpExport
 * Signature: (JLjava/lang/String;JJ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeOpExport
  (JNIEnv *, jobject, jlong, jstring, jlong, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeOpGenKey
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeOpGenKey
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeCtxSetEngineInfo
 * Signature: (JILjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeCtxSetEngineInfo
  (JNIEnv *, jobject, jlong, jint, jstring, jstring);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeOpGenkeyResult
 * Signature: (J)Lcom/freiheit/gnupg/GnuPGGenkeyResult;
 */
JNIEXPORT jobject JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeOpGenkeyResult
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeOpDelete
 * Signature: (JJZ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeOpDelete
  (JNIEnv *, jobject, jlong, jlong, jboolean);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeGetArmor
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeGetArmor
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeSetArmor
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeSetArmor
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeGetTextmode
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeGetTextmode
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_freiheit_gnupg_GnuPGContext
 * Method:    gpgmeSetTextmode
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_freiheit_gnupg_GnuPGContext_gpgmeSetTextmode
  (JNIEnv *, jobject, jlong, jlong);

#ifdef __cplusplus
}
#endif
#endif
